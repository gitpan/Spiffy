NAME
    Spiffy - Spiffy Perl Interface Framework For You

SYNOPSIS
        package Keen;
        use Spiffy '-Base';
        field 'mirth';
        const mood => ':-)';
    
        sub happy {
            if ($self->mood eq ':-(') {
                $self->mirth(-1);
                print "Cheer up!";
            }
            super;
        }

DESCRIPTION
    "Spiffy" is a framework and methodology for doing object oriented
    programming in Perl. Spiffy combines the best parts of Exporter.pm,
    base.pm, mixin.pm and SUPER.pm into one magic foundation class. It
    attempts to fix all the nits and warts of traditional Perl OO, in a
    clean, straightforward and (perhaps someday) standard way.

    Spiffy borrows ideas from other OO languages like Python, Ruby, Java and
    Perl 6. It also adds a few tricks of its own.

    The most striking difference between Spiffy and other Perl object
    oriented base classes, is that it has the ability to export functions.
    If you create a subclass of Spiffy, all the functions that Spiffy
    exports will automatically be exported by your subclass, in addition to
    any more functions that you want to export. And if someone creates a
    subclass of your subclass, all of those functions will be exported
    automatically, and so on.

    To use Spiffy or any subclass of Spiffy as a base class of your class,
    you specify the "-base" argument to the "use" command.

        use MySpiffyBaseModule '-base';

    You can also use the traditional "use base 'MySpiffyBaseModule';" syntax
    and everything will work exactly the same. The only caveat is that
    Spiffy.pm must already be loaded. That's because Spiffy rewires base.pm
    on the fly to do all the Spiffy magics.

    In object oriented Perl almost every subroutine is a method. Each method
    gets the object passed to it as its first argument. That means
    practically every subroutine starts with the line:

         my $self = shift;

    Spiffy provides a simple, optional filter mechanism to insert that line
    for you, resulting in cleaner code. If you figure an average method has
    10 lines of code, that's 10% of your code! To turn this option on, you
    just use the "-Base" option instead of the "-base" option. If source
    filtering makes you queazy, don't use the feature. I personally find it
    addictive in my quest for writing squeaky clean, maintainable code.

    A useful feature of Spiffy is that it exports two functions: "field" and
    "const" that can be used to declare the attributes of your class, and
    automatically generate accessor methods for them. The only difference
    between the two functions is that "const" attributes can not be
    modified; thus the accessor is much faster.

    One interesting aspect of OO programming is when a method calls the same
    method from a parent class. This is generally known as calling a super
    method. Perl's facility for doing this is butt ugly:

        sub cleanup {
            my $self = shift;
            $self->scrub;
            $self->SUPER::cleanup(@_);
        }

    Spiffy makes it, er, super easy to call super methods. You just use the
    "super" function. You don't need to pass it any arguments because it
    automatically passes them on for you. Here's the same function with
    Spiffy:

        sub cleanup {
            $self->scrub;
            super;
        }

    Spiffy has an interesting function that it exports called
    "spiffy_constructor". This function will generate a shortcut function
    that will call the class's "new" constructor. It is smart enough to know
    which class to use. All the arguments you pass to the generated
    function, get passed on to each invocation of the constructor. In
    addition, all the arguments you passed in the use statement for that
    class, also get passed to the constructor. The "io()" function of
    IO::All is a good example of using "spiffy_constructor".

    Spiffy has a special method for parsing arguments called
    "parse_arguments", that it also uses for parsing its own arguments. You
    declare which arguments are boolean (singletons) and which ones are
    paired, with two special methods called "boolean_arguments" and
    "paired_arguments". Parse arguments pulls out the booleans and pairs and
    returns them in an anonymous hash, followed by a list of the unmatched
    arguments.

    Finally, Spiffy exports a few debugging functions "WWW", "XXX", "YYY"
    and "ZZZ". Each of them produces a YAML dump of its arguments. WWW warns
    the output, XXX dies with the output, YYY prints the output, and ZZZ
    confesses the output.

    That's Spiffy!

Spiffy EXPORTING
    Spiffy implements a completely new idea in Perl. Modules that act both
    as object oriented classes, and that also export functions. But it takes
    the concept of Exporter.pm one step further; it walks the entire @ISA
    path of a class and honors the export specifications of each module.
    Since Spiffy calls on the Exporter module to do this, you can use all
    the fancy interface features that Exporter has, including tags and
    negation.

    Spiffy considers all the arguments that don't begin with a dash to
    comprise the export specification.

        package Vehicle;
        use Spiffy '-base';
        our $SERIAL_NUMBER = 0;
        our @EXPORT = qw($SERIAL_NUMBER);

        package Bicycle;
        use Vehicle '-base', '!field';

    In this case, "Bicycle-"isa('Vehicle')> and also all the things that
    "Vehicle" and "Spiffy" export, will go into "Bicycle", except "field".

    Exporting can be very helpful when you've designed a system with
    hundreds of classes, and you want them all to have access to some
    functions or constants or variables. Just export them in your main base
    class and every subclass will get the functions they need.

Spiffy FILTERING
    By using the "-Base" flag instead of "-base" you never need to write the
    line:

        my $self = shift;

    This statement is added to every subroutine in your class by using a
    source filter. The magic is simple and fast, so there is litte
    performance penalty for creating clean code on par with Ruby and Python.

        package Example;
        use Spiffy '-Base';

        sub crazy {
            $self->nuts;
        }
        sub wacky { }
        sub new() {
            bless [], shift;
        }

    is exactly the same as:

        package Example;
        use Spiffy '-base';

        sub crazy {my $self = shift;
            $self->nuts;
        }
        sub wacky {my $self = shift; }
        sub new {
            bless [], shift;
        }

    Note that the empty parens after the subroutine "new" keep it from
    having a $self added. Also not that the extra code is added to existing
    lines to ensure that line numbers are not altered.

Spiffy DEBUGGING
    The XXX function is very handy for debugging because you can insert it
    almost anywhere, and it will dump your data in nice clean YAML. Take the
    following statement:

        my @stuff = grep { /keen/ } $self->find($a, $b);

    If you have a problem with this statement, you can debug it in any of
    the following ways:

        XXX my @stuff = grep { /keen/ } $self->find($a, $b);
        my @stuff = XXX grep { /keen/ } $self->find($a, $b);
        my @stuff = grep { /keen/ } XXX $self->find($a, $b);
        my @stuff = grep { /keen/ } $self->find(XXX $a, $b);

    XXX is easy to insert and remove. It is also a tradition to mark
    uncertain areas of code with XXX. This will make the debugging dumpers
    easy to spot if you forget to take them out.

    WWW and YYY are nice because they dump their arguments and then return
    the arguments. This way you can insert them into many places and still
    have the code run as before. Use ZZZ when you need to die with both a
    YAML dump and a full stack trace.

    The debugging functions are not exported by default. To export all 4
    functions use the export tag ":XXX".

Spiffy FUNCTIONS
    This section describes the functions the Spiffy exports. The "field",
    "const", "super" and "spiffy_constructor" functions are only exported
    when you use the "-base" or "-Base" options.

    * field
        Defines accessor methods for a field of your class:

            package Example;
            use Spiffy '-Base';
    
            field 'foo';
            field bar => [];

            sub lalala {
                $self->foo(42);
                push @{$self->{bar}}, $self->foo;
            }

        The first parameter passed to "field" is the name of the attribute
        being defined. Accessors can be given an optional default value.
        This value will be returned if no value for the field has been set
        in the object.

    * const
            const bar => 42;

        The "const" function is similar to <field> except that it is
        immutable. It also does not store data in the object. You probably
        always want to give a "const" a default value, otherwise the
        generated method will be somewaht useless.

    * stub
            stub 'cigar';

        The "stub" function generates a method that will die with an
        appropriate message. The idea is that subclasses must implement
        these methods so that the stub methods don't get called.

    * super
        This function is called without any arguments. It will call the same
        method that it is in, higher up in the ISA tree, passing it all the
        same arguments.

            sub foo {
                super;             # Same as $self->SUPER::foo(@_);
                $self->bar(42);
            }

            sub new() {
                my $self = super;
                $self->init;
                return $self;
            }

        "super" will simply do nothing if there is no super method.

    * spiffy_constructor
        This function generates a function that calls the "new()" method for
        your class. It passes all its arguments on to "new", as well as any
        arguments passed to the "use" statement of your class.

            package Example;
            use Spiffy '-base';
            our @EXPORT = qw(foo);
    
            spiffy_constructor 'foo';

        The "spiffy_constructor" function is only exported if you use the
        '-base' option.

Spiffy METHODS
    This section list all of the methods that any subclass of Spiffy
    automatically inherits.

    * is_spiffy
        Returns true if an object is Spiffy. This method is UNIVERSAL so it
        can be called on all objects.

    * parse_arguments
        This method takes a list of arguments and groups them into pairs. It
        allows for boolean arguments which may or may not have a value
        (defaulting to 1). The method returns a hash reference of all the
        pairs as keys and values in the hash. Any arguments that cannot be
        paired, are returned as a list. Here is an example:

            sub boolean_arguments { qw(-has_spots -is_yummy) }
            sub paired_arguments { qw(-name -size) }
            my ($pairs, @others) = $self->parse_arguments(
                'red', 'white',
                -name => 'Ingy',
                -has_spots =>
                -size => 'large',
                'black',
                -is_yummy => 0,
            );

        After this call, $pairs will contain:

            {
                -name => 'Ingy',
                -has_spots => 1,
                -size => 'large',
                -is_yummy => 0,
            }

        and $others will contain 'red', 'white', and 'black'.

    * boolean_arguments
        Returns the list of arguments that are recognized as being boolean.
        Override this method to define your own list.

    * paired_arguments
        Returns the list of arguments that are recognized as being paired.
        Override this method to define your own list.

Spiffy ARGUMENTS
    When you "use" the Spiffy module or a subclass of it, you can pass it a
    list of arguments. These arguments are parsed using the
    "parse_arguments" method described above. Any arguments that are pairs
    are passed on to calls to a spiffy_constructor generated function. The
    special argument "-base", is used to make the current package a subclass
    of the Spiffy module being used.

    Any non-paired parameters act like a normal import list; just like those
    used with the Exporter module.

USING Spiffy WITH base.pm
    The proper way to use a Spiffy module as a base class is with the
    "-base" parameter to the "use" statement. This differs from typical
    modules where you would want to "use base".

        package Something;
        use Spiffy::Module '-base';
        use base 'NonSpiffy::Module';

    Now it may be hard to keep track of what's Spiffy and what is not.
    Therefore Spiffy has actually been made to work with base.pm. You can
    say:

        package Something;
        use base 'Spiffy::Module';
        use base 'NonSpiffy::Module';

    "use base" is also very useful when your class is not an actual module
    (a separate file) but just a package in some file that has already been
    loaded. "base" will work whether the class is a module or not, while the
    "-base" syntax cannot work that way, since "use" always tries to load a
    module.

  base.pm Caveats
    To make Spiffy work with base.pm a dirty trick was played. Spiffy swaps
    "base::import" with its own version. If the base modules are not Spiffy,
    Spiffy calls the original base::import. If the base modules are Spiffy,
    then Spiffy does its own thing.

    There are two caveats.

    * Spiffy must be loaded first.
        If Spiffy is not loaded and "use base" is invoked on a Spiffy
        module, Spiffy will die with a useful message telling the author to
        read this documentation. That's because Spiffy needed to do the
        import swap beforehand.

        If you get this error, simply put a statement like this up front in
        your code:

            use Spiffy ();

    * No Mixing
        "base.pm" can take multiple arguments. And this works with Spiffy as
        long as all the base classes are Spiffy, or they are all non-Spiffy.
        If they are mixed, Spiffy will die. In this case just use separate
        "use base" statements.

Spiffy TODO LIST
    Spiffy is a wonderful way to do OO programming in Perl, but it is still
    a work in progress. New things will be added, and things that don't work
    well, might be removed.

    One thing I really want to add is mixins. Mixins are good medicine for
    multiple inheritance headaches. The syntax will use "-mixin" instead of
    "-base". But I still need to think on exactly how this should work,
    before implementing it. If you are an OO guru and have good ideas about
    how this should work, please send me an email.

AUTHOR
    Brian Ingerson <INGY@cpan.org>

COPYRIGHT
    Copyright (c) 2004. Brian Ingerson. All rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

    See <http://www.perl.com/perl/misc/Artistic.html>

